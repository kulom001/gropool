# Generated by Django 3.0.6 on 2020-07-28 05:07

import Profile.static.profilepics.profunction
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyGroup',
            fields=[
                ('groupId', models.AutoField(primary_key=True, serialize=False)),
                ('groupName', models.CharField(max_length=20, unique=True, verbose_name='Group Name')),
                ('groupDescription', models.CharField(max_length=200, verbose_name='Group Description')),
                ('dayOfDelivery', models.CharField(choices=[('1', 'Monday'), ('2', 'Tuesday'), ('3', 'Wednesday'), ('4', 'Thursday'), ('5', 'Friday'), ('6', 'Saturday'), ('7', 'Sunday')], max_length=10, verbose_name='Day Of Grocery Shopping')),
                ('shopId', models.CharField(blank=True, choices=[('Costco', 'Costco'), ('Target', 'Target'), ('Walmart', 'Walmart'), ('Safeway', 'Safeway'), ('New India Bazaar', 'New India Bazaar')], max_length=50, verbose_name='Shops')),
                ('addshop', models.CharField(blank=True, max_length=50, verbose_name="Can't find your shop?")),
                ('zipcode', models.CharField(max_length=5, verbose_name='Zipcode')),
            ],
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=20, unique=True)),
                ('password', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=50, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator('^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$', 'Enter a valid email address.')])),
                ('zipcode', models.CharField(max_length=5)),
                ('profilepic', models.ImageField(upload_to='', verbose_name=Profile.static.profilepics.profunction.randomfood)),
                ('description', models.CharField(max_length=200)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FormedGroup',
            fields=[
                ('formedGroupId', models.AutoField(primary_key=True, serialize=False)),
                ('userEmail', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('userGroupID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Profile.MyGroup')),
            ],
        ),
    ]
